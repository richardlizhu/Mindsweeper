{
  "name": "xrange",
  "version": "1.0.1",
  "description": "xrange function for easy numeric iteration",
  "main": "index.js",
  "scripts": {
    "pretest": "./node_modules/.bin/jshint .",
    "test": "./node_modules/.bin/mocha -R spec",
    "test-web": "./node_modules/.bin/mocha-phantomjs -R spec test/test.html --bail"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gyllstromk/xrange"
  },
  "author": {
    "name": "Karl Gyllstrom"
  },
  "license": "BSD",
  "devDependencies": {
    "jshint": "~2.1.3",
    "mocha": "~1.11.0",
    "mocha-phantomjs": "~3.0.0"
  },
  "directories": {
    "test": "test"
  },
  "keywords": [
    "range",
    "xrange",
    "iterator"
  ],
  "readme": "# xrange.js\n[![Build Status](https://travis-ci.org/gyllstromk/xrange.png?branch=master)](https://travis-ci.org/gyllstromk/xrange)\n\nJavascript `xrange` / `range` function for node and browser.\n\n`xrange` is based on the function of the same name from Python 2. It is a facility to iterate from `start` to `finish` by `increment` -- even downward -- without having to create a loop or array. Importantly, like the one in Python, `xrange` can be used completely as an iterator, with *no array* created.\n\n# Usage\n\n## Create with 1, 2, or 3 parameters\n\n```js\nxrange(3).toArray();        // -> [ 0, 1, 2 ];\nxrange(1, 4).toArray();     // -> [ 1, 2, 3 ];\nxrange(1, 6, 2).toArray();  // -> [ 1, 3, 5 ];\n```\n\n## Count downwards\n\nImplied if second argument < first, but can also be set as 3rd parameter:\n\n```js\nxrange(5, 2).toArray();     // -> [ 5, 4, 3 ];\nxrange(5, 0, -2).toArray(); // -> [ 5, 3, 1 ];\n```\n\n## Length\n\n```js\nxrange(5).length; // 5\nxrange(0, 5, 2);  // 3\n```\n\n## Iterators\n\n### each/foreach\n\n```js\nvar sum = 0;\nxrange(3).each(function(each) {\n    sum += each;\n});\n\n// or `forEach`\nxrange(3).forEach(function(each) {\n    sum += each;\n});\n```\n\n### map\n\n```js\nvar plusOne = xrange(3).map(function(each) {\n    return each + 1;\n});\n```\n\n## Recipes\n\nCreate an array of 5 5's:\n\n```js\nvar array = xrange(5).map(function () {\n    return 5;\n});\n```\n\nUse [async](https://github.com/caolan/async) like a `for` loop:\n\n```js\nasync.each(\n    xrange(1, 10),\n    function(each, callback) {\n        callback(null, each);\n    }, function (err) {\n        // finished ...\n    }\n);\n```\n\n# Installation\n\n## Node\n\n    npm install xrange\n\n## Browser\n\n    bower install xrange \n",
  "_id": "xrange@1.0.1",
  "dist": {
    "shasum": "156df2378d1ecf6ae697b32fe8db941beb65a32a",
    "tarball": "http://registry.npmjs.org/xrange/-/xrange-1.0.1.tgz"
  },
  "maintainers": [
    {
      "name": "gyllstromk",
      "email": "karl.gyllstrom@gmail.com"
    }
  ],
  "_shasum": "156df2378d1ecf6ae697b32fe8db941beb65a32a",
  "_resolved": "https://registry.npmjs.org/xrange/-/xrange-1.0.1.tgz",
  "_from": "xrange@>=1.0.1 <2.0.0"
}
